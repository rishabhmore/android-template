# Name of the Workflow. This name will displayed on the "Actions" tab of your repository
# and it completely optional
name: CD

# The "on" event block. Describes on which events on your repository should this workflow
# be triggered. It could be on push, on pull request, on issues, etc.
on:
  # our CD workflow will be executed for every push to the main branch
  # Additionally, you can also specify a "branches" and pass an array of branches
  # if you specifically wish to execute this workflow on pull request for specific branches
  push:
    branches:
      - main

# This block groups all the jobs that can be executed in a workflow.
# A single workflow can have many jobs that can be executed either sequentially or in parallel
jobs:
  # This is the name/job_id of our job! We're building release apk for our main branch
  build:
    # tells which OS our VM should have, on which our runners will execute
    # creates a fresh instance of that VM for each individual job
    runs-on: ubuntu-latest
    # A label name for our job. Shows up in Runner Actions when job is executed
    name: Build and Deploy the apk
    # This block groups all the steps that should run in a given job
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.SHOUNAK_GITHUB_TOKEN  }}
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup local.properties
        env:
            PROPS: ${{ secrets.LOCAL_PROPERTIES }}
        run: echo -n "$PROPS" | base64 --decode > local.properties
      - name: Build the Release APK
        run: |
          bash scripts/actions/build_file_according_to_flavour.sh
      - uses: r0adkll/sign-android-release@v1
        name: Sign app APK
        id: sign_app
        with:
          releaseDirectory: ${{ env.RELEASE_OUTPUT_FILE }}
          signingKeyBase64: ${{ secrets.KEYSTORE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "30.0.3"
      - name: Generate the new Tag from Version Code
        id: new_tag
        run: |
          bash scripts/actions/generate_new_version_code.sh
      - name: Generate release with the tag
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.NEW_TAG }}
          body: New Release Created
          artifacts: ${{steps.sign_app.outputs.signedReleaseFile}}
          artifactErrorsFailBuild: true
      - name: Commit new version code changes
        run: |
          bash scripts/actions/commit_and_update.sh
      - name: Upload apk to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          # Here ORG_NAME will be your AppCenter user-name & APP_NAME should be the application name
          # in App Center Dashboard
          appName: ${{secrets.ORG_NAME}}/${{secrets.APP_NAME}}
          token: ${{secrets.APPCENTER_USER_API_KEY}}
          group: ${{secrets.GROUP_NAME}}
          file: ${{steps.sign_app.outputs.signedReleaseFile}}
          notifyTesters: true
          debug: false