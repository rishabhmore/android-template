# Name of the Workflow. This name will displayed on the "Actions" tab of your repository
# and it completely optional
name: CI

# The "on" event block. Describes on which events on your repository should this workflow
# be triggered. It could be on push, on pull request, on issues, etc.
on:
  # our CI workflow will be executed for every pull request that is created for our repo
  # Additionally, you can also specify a "branches" and pass an array of branches
  # if you specifically wish to execute this workflow on pull request for specific branches
  pull_request:


env:
  APP_LOCATION: app/build/outputs/apk/debug/app-debug.apk
  ORG_NAME: Wednesday-Test # The organisation name
  GROUP_NAME: Testers # The group name, you can create as many as you want but mention the one you want to notify
  APP_NAME: Android-Template # The app name, under wh


# This block groups all the jobs that can be executed in a workflow.
# A single workflow can have many jobs that can be executed either sequentially or in parallel
jobs:
  # This is the name/job_id of our job! We're lint testing our builds in this job
  lint_test_build:
    # A label name for our job. Shows up in Runner Actions when job is executed
    name: Lint, Test and Build
    # tells which OS our VM should have, on which our runners will execute
    # creates a fresh instance of that VM for each individual job
    runs-on: ubuntu-latest
    # This block groups all the steps that should run in a given job
    steps:
      - uses: actions/checkout@v2 # 1. we checkout our repository
      - uses: actions/setup-java@v2 # 2. we will install java 11 on our VM
        with:
          distribution: 'zulu'
          java-version: '11'
      # 3. use action Cache to cache dependencies & build outputs to improve workflow execution time
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # 4. setup our Local Properties from Github Secrets
      - name: Setup local.properties
        env:
          PROPS: ${{ secrets.LOCAL_PROPERTIES }}
        # the run block executes the below command on root directory of the repo
        run: echo -n "$PROPS" | base64 --decode > local.properties
      # 5. run Ktlint
      - name: Ktlint
        run: ./gradlew ktlint
      # 6. run Lint rules for release Builds
      - name: Lint
        run: ./gradlew lintDevRelease
      # 7. run our unit tests
      - name: Unit tests
        run: ./gradlew testDevDebugUnitTest
      #8. Finally build a debug apk
      - name: Build the apk
        run: ./gradlew assembleDevDebug

